var pc = require('ProcessChain');
var allJobs = [];

function JavaScript(func)
{
    if (typeof func === "function")
        this.exec = func;
    this._next = undefined;
    this._data = undefined;
    this._written = false;
}

// Should be overridden
JavaScript.prototype.exec = function(data)
{
    return data;
};

JavaScript.prototype.chain = function(js)
{
    var obj = this;
    while (obj._next !== undefined)
        obj = obj._next;
    obj._next = js;
};

JavaScript.prototype.write = function(data)
{
    var r = this.exec(data);
    if (this._next)
        this._next.write(r);
    else
        this._data = r;
    this._written = true;
};

JavaScript.prototype.end = function(callback)
{
    var obj = this;

    if (!this._written)
        this.write();

    while (obj._next !== undefined)
        obj = obj._next;
    callback(obj._data);
    obj._data = undefined;
};

JavaScript.prototype.isLast = function()
{
    return (this._next === undefined);
};

function Job()
{
    this._jobs = [];
    this._chains = [];
    this._currentJob = undefined;
}

Job.prototype.toString = function()
{
    if (this._currentJob === undefined) {
        throw "Job not started yet, this shouldn't happen";
    }
    if (this._currentJob < 0 || this._currentJob >= this._jobs.length) {
        throw "_currentJob out of range, " + this._currentJob + " vs " + this._jobs.length;
    }

    var sub = this._jobs[this._currentJob];
    if (sub.type === "process") {
        return sub.jobs[0].program;
    } else if (sub.type === "js") {
        return JSON.stringify(sub.job);
    } else {
        throw "Unknown job type " + sub.type;
    }
};

Job.prototype.cont = function(type)
{
    if (this._currentJob === undefined) {
        throw "Job not started yet, this shouldn't happen";
    }
    if (this._currentJob < 0 || this._currentJob >= this._jobs.length) {
        throw "_currentJob out of range, " + this._currentJob + " vs " + this._jobs.length;
    }

    var sub = this._jobs[this._currentJob];
    if (sub.type === "process") {
        if (sub._pchain === undefined) {
            throw "_pchain is undefined";
        }
        this.type = type;
        this.status = 0; // 0 = RUNNING
        sub._pchain.cont(type);
    } else {
        throw "Can't continue JavaScript jobs";
    }
};

Job.prototype.process = function(process)
{
    // try to find the program
    var prog = process.program;
    if (typeof prog !== "string") {
        throw "Undefined program";
    }
    if (prog.indexOf("/") == -1) {
        // check PATH
        var path = global.PATH;
        if (typeof path !== "string") {
            // throw here?
            return;
        }
        // split on ':'
        path = path.split(":");
        for (var i in path) {
            if (global.jsh.jshNative.isExecutable(path[i] + "/" + prog))
                prog = path[i] + "/" + prog;
        }
        if (prog.indexOf("/") == -1) {
            throw "File not found: " + process.program;
        }
        process.program = prog;
    } else {
        if (!global.jsh.jshNative.isExecutable(process.program)) {
            throw "File not found: " + process.program;
        }
    }

    var idx = this._jobs.length;
    if (this._jobs.length === 0 || this._jobs[idx - 1].type !== "process")
        this._jobs.push({type: "process", jobs: [process]});
    else
        this._jobs[idx - 1].jobs.push(process);
    return this;
};

Job.prototype.proc = Job.prototype.process;

Job.prototype.js = function(js)
{
    if (!(js instanceof JavaScript))
        return this;
    js._next = undefined;

    var idx = this._jobs.length;
    if (this._jobs.length === 0 || this._jobs[idx - 1].type !== "js")
        this._jobs.push({type: "js", job: js});
    else
        this._jobs[idx - 1].job.chain(js);
    return this;
};

Job.prototype.exec = function(type, outCallback, doneCallback)
{
    // set job status to RUNNING
    this.status = 0;
    // add to list of jobs
    allJobs.push(this);
    // go!
    this._runJobsFrom(0, type, outCallback, doneCallback);
};

Job.prototype._update = function(status)
{
    if (status === 2) { // TERMINATED
        var idx = allJobs.indexOf(this);
        if (idx === -1) {
            throw "Job not in allJobs";
        }
        allJobs.splice(idx, 1);
        this.status = undefined;
    } else {
        this.status = status;
    }
};

Job.prototype._runJobsFrom = function(pos, type, outCallback, doneCallback, jchain)
{
    this.type = type;
    var that = this;
    var pchain, lastJob;
    for (var i = pos; i < this._jobs.length; ++i) {
        this._currentJob = i;
        lastJob = (i == this._jobs.length - 1);
        var job = this._jobs[i];
        if (job.type === "process") {
            pchain = new pc.ProcessChain(global.jsh.jshNative, type);
            job._pchain = pchain;
            for (j in job.jobs) {
                pchain.chain(job.jobs[j]);
            }
            if (jchain) {
                jchain.end(function(data) { pchain.write(data); });
                jchain = undefined;
            }
        } else {
            jchain = job.job;
            if (pchain) {
                // exec process, wait until complete before continuing chain
                var that = this;
                pchain.exec(function(data) {
                    if (data.type === "stdout") {
                        jchain.write(data.data);
                    } else {
                        if (!lastJob) { // complete, continue chain now
                            that._runJobsFrom(i + 1, type, outCallback, doneCallback, jchain);
                        } else {
                            jchain.end(outCallback);
                            if (doneCallback) {
                                that._update(data.status);
                                doneCallback();
                            }
                        }
                    }
                });
                return;
            }
        }
    }
    if (jchain) {
        jchain.end(outCallback);
        if (doneCallback) {
            that._update(2); // 2 = TERMINATED
            doneCallback();
        }
    } else if (pchain) {
        pchain.exec(function(data) {
            if (data.type === "stdout") {
                outCallback(data.data);
            } else { // complete, tell JS we're done
                if (type === 0) { // foreground
                    if (doneCallback) {
                        that._update(data.status);
                        doneCallback();
                    }
                }
            }
        });
        if (type === 1) { // background
            if (doneCallback) {
                doneCallback();
            }
        }
    }
};

module.exports = {
    Job: Job,
    Jobs: allJobs,
    JavaScript: JavaScript,
    FOREGROUND: 0,
    BACKGROUND: 1,
    RUNNING: 0,
    STOPPED: 1,
    TERMINATED: 2
};
