var pc = require('ProcessChain');

function JavaScript(func)
{
    if (typeof func === "function")
        this.exec = func;
    this._next = undefined;
    this._data = undefined;
    this._written = false;
}

// Should be overridden
JavaScript.prototype.exec = function(data)
{
    return data;
};

JavaScript.prototype.chain = function(js)
{
    var obj = this;
    while (obj._next !== undefined)
        obj = obj._next;
    obj._next = js;
};

JavaScript.prototype.write = function(data)
{
    var r = this.exec(data);
    if (this._next)
        this._next.write(r);
    else
        this._data = r;
    this._written = true;
};

JavaScript.prototype.end = function(callback)
{
    var obj = this;

    if (!this._written)
        this.write();

    while (obj._next !== undefined)
        obj = obj._next;
    callback(obj._data);
    obj._data = undefined;
};

JavaScript.prototype.isLast = function()
{
    return (this._next === undefined);
};

function Job()
{
    this._jobs = [];
    this._chains = [];
}

Job.prototype.process = function(process)
{
    var idx = this._jobs.length;
    if (this._jobs.length === 0 || this._jobs[idx - 1].type !== "process")
        this._jobs.push({type: "process", jobs: [process]});
    else
        this._jobs[idx - 1].jobs.push(process);
    return this;
};

Job.prototype.proc = Job.prototype.process;

Job.prototype.js = function(js)
{
    if (!(js instanceof JavaScript))
        return this;
    js._next = undefined;

    var idx = this._jobs.length;
    if (this._jobs.length === 0 || this._jobs[idx - 1].type !== "js")
        this._jobs.push({type: "js", job: js});
    else
        this._jobs[idx - 1].job.chain(js);
    return this;
};

Job.prototype.exec = function(type, outCallback, doneCallback)
{
    this._runJobsFrom(0, type, outCallback, doneCallback);
};

Job.prototype._runJobsFrom = function(pos, type, outCallback, doneCallback, jchain)
{
    var pchain, lastJob;
    for (var i = pos; i < this._jobs.length; ++i) {
        lastJob = (i == this._jobs.length - 1);
        var job = this._jobs[i];
        if (job.type === "process") {
            pchain = new pc.ProcessChain(global.jsh.jshNative, type);
            for (j in job.jobs) {
                pchain.chain(job.jobs[j]);
            }
            if (jchain) {
                jchain.end(function(data) { pchain.write(data); });
                jchain = undefined;
            }
        } else {
            jchain = job.job;
            if (pchain) {
                // exec process, wait until complete before continuing chain
                var that = this;
                pchain.exec(function(data) {
                                if (data.type === "stdout") {
                                    jchain.write(data.data);
                                } else {
                                    if (!lastJob) { // complete, continue chain now
                                        that._runJobsFrom(i + 1, type, outCallback, doneCallback, jchain);
                                    } else {
                                        jchain.end(outCallback);
                                        if (doneCallback)
                                            doneCallback();
                                    }
                                }
                            });
                return;
            }
        }
    }
    if (jchain) {
        jchain.end(outCallback);
        if (doneCallback)
            doneCallback();
    } else if (pchain) {
        pchain.exec(function(data) {
                        if (data.type === "stdout") {
                            outCallback(data.data);
                        } else if (!lastJob) { // complete, continue chain now
                            if (type === 0) // foreground
                                if (doneCallback)
                                    doneCallback();
                        }
                    });
        if (type === 1) // background
            if (doneCallback)
                doneCallback();
    }
};

module.exports = {
    Job: Job,
    JavaScript: JavaScript,
    FOREGROUND: 0,
    BACKGROUND: 1
};
