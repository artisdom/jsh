var fs = require('fs');
var Promise = require('promise');
var vm = require('vm');

function Service(functions)
{
    function rpc(func, args) {
        console.log("REMOTE CALL", func, args);
    }
    for (var i=0; i<functions.length; ++i) {
        var func = functions[i];
        this[func] = function() { rpc(func, arguments); };
    }
}
Service.prototype.addEventListener = function(listener)
{
    this._eventListeners.push(listener);
};

Service.prototype.removeEventListener = function(listener)
{
    var idx = this._eventListeners.indexOf(listener);
    if (idx != -1) {
        this._eventListeners.splice(idx, 1);
        return true;
    }
    return false;
};

function registerService(name, cb)
{
    var stat = Promise.denodeify(fs.stat);
    var readFile = Promise.denodeify(fs.readFile);
    var writeFile = Promise.denodeify(fs.writeFile);

    var serviceDir = process.env.HOME + '/.jsh/services/';
    var file = serviceDir + name + '/' + name + '.js';
    var fileTime;
    var manifestFile = file + '.manifest';

    stat(file).
        then(function(s) {
            fileTime = s.mtime.getTime();
            return stat(manifestFile);
        }).
        then(function(s) {
            if (s.mtime.getTime() <= fileTime) {
                return updateManifest();
            } else {
                return readManifest();
            }
        }, function(err) {
            return updateManifest();
        }).
        catch(function(err) {
            finish(undefined);
        });

    function updateManifest()
    {
        // console.log("got update manifest");
        var functions;
        readFile(file, { encoding: 'utf8' }).
            then(function(script) {
                script += '(function(){var f=[];for(var i in exports){if(typeof(exports[i])===\'function\')f.push(i);} return f;})()';
                functions = vm.runInNewContext(script, undefined, file); // no async API for this?
                return writeFile(manifestFile, functions.join(' '));
            }).then(function(err) {
                if (err)
                    throw err;
                finish(functions);
            }).catch(function(err) {
                // console.log("GOT ERR HERE", err);
                finish(undefined); // pass error?
            });
    }

    function readManifest()
    {
        // console.log("got read manifest");
        readFile(manifestFile, { encoding: 'utf8' }).
            then(function(contents) {
                finish(contents.split(' '));
            }, function(err) {
                finish(undefined);
            });
    }

    function finish(result) {
        // console.log("GOT ERR 2", result);
        if (result instanceof Array) {
            cb(new Service(result));
        } else {
            cb(result);
        }
    }
}
// registerService("foobar", function(service) {
//     if (service instanceof Service) {
//         if (service.foo) {
//             service.foo("foobar", "test");
//         }
//     } else {
//         console.log("NO SERVICE HERE", service);
//     }
//     // console.log(service);
// });

exports.registerService = registerService;
