var NORMAL = 0;
var QUOTE = 1;
var SINGLEQUOTE = 2;
var BRACE = 3;
var PAREN = 4;

var HIDDEN = 0;
var OPERATOR = 1;
var COMMAND = 2;
var JAVASCRIPT = 3;
var GROUP = 4;

function stripEscapes(str)
{
    var lst = str.split("\\");
    str = "";
    for (var i in lst) {
        if (i > 0 && lst[i].length === 0)
            str += "\\";
        else
            str += lst[i];
    }
    return str;
}

function Tokenizer()
{
}

Tokenizer.prototype._line = undefined;
Tokenizer.prototype._pos = undefined;
Tokenizer.prototype._prev = undefined;
Tokenizer.prototype._state = {
    state: [],
    push: function(s) { this.state.push(s); },
    pop: function() { return this.state.pop(); },
    value: function() {
        if (this.state.length === 0)
            throw("state length is 0");
        return this.state[this.state.length - 1];
    },
    prev: function() {
        if (this.state.length === 0)
            throw("state length is 0");
        if (this.state.length === 1)
            return undefined;
        return this.state[this.state.length - 2];
    },
    count: function(s) {
        if (this.state.length === 0)
            throw("state length is 0");
        var pos = this.state.length - 1;
        var cnt = 0;
        while (pos >= 0) {
            if (this.state[pos] !== s)
                return cnt;
            --pos;
            ++cnt;
        }
        return cnt;
    },
    is: function() {
        for (var i in arguments) {
            if (this.value() === arguments[i])
                return true;
        }
        return false;
    }
};

Tokenizer.prototype.tokenize = function(line)
{
    this._line = line;
    this._pos = this._prev = 0;
    this._state.push(NORMAL);
};

Tokenizer.prototype._addPrev = function(type, entry)
{
    if (this._pos > this._prev)
        entry.push({ type: type, data: stripEscapes(this._line.substr(this._prev, this._pos - this._prev)) });
    this._prev = this._pos + 1;
};

Tokenizer.prototype._addOperator = function(entry)
{
    var op = this._line[this._pos];
    var len = 1;
    if (this._pos + 1 < this._line.length && this._line[this._pos + 1] === op) {
        len = 2;
    }
    entry.push({ type: OPERATOR, data: stripEscapes(this._line.substr(this._pos, len)) });
    if (len === 2)
        ++this._pos;
    this._prev = this._pos + 1;
    return len;
};

Tokenizer.prototype._addHidden = function(entry, data)
{
    entry.push({ type: HIDDEN, data: data });
};

Tokenizer.prototype.next = function()
{
    var entry = [], len, ch, st;

    var done = false;
    this._prev = this._pos;
    var start = this._prev;
    var escape = false;
    while (!done && this._pos < this._line.length) {
        ch = this._line[this._pos];
        switch (ch) {
        case '"':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addHidden(entry, "'");
                    this._state.push(QUOTE);
                } else {
                    escape = false;
                }
            } else if (this._state.value() === QUOTE) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addHidden(entry, "'");
                    this._state.pop();

                } else {
                    escape = false;
                }
            }
            break;
        case '\'':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addHidden(entry, "'");
                    this._state.push(SINGLEQUOTE);
                } else {
                    escape = false;
                }
            } else if (this._state.value() === SINGLEQUOTE) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addHidden(entry, "'");
                    this._state.pop();
                } else {
                    escape = false;
                }
            }
            break;
        case '{':
        case '(':
            st = (ch === '{' ? BRACE : PAREN);
            if (this._state.value() === NORMAL && escape) {
                escape = false;
            } else if (this._state.is(NORMAL, st)) {
                if (this._state.is(NORMAL)) {
                    this._addPrev(COMMAND, entry);
                    if (entry.length !== 0)
                        return entry;
                }
                this._state.push(st);
            }
            break;
        case '}':
        case ')':
            st = (ch === '}' ? BRACE : PAREN);
            if (this._state.value() === NORMAL && escape) {
                escape = false;
            } else if (this._state.value() === st) {
                if (this._state.prev() === NORMAL) {
                    this._addPrev((st === BRACE) ? JAVASCRIPT : GROUP, entry);
                    if (st === BRACE)
                        done = true;
                }
                this._state.pop();
            }
            break;
        case ';':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addHidden(entry, ';');
                    done = true;
                } else {
                    escape = false;
                }
            }
            break;
        case ' ':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                } else {
                    escape = false;
                }
            }
            break;
        case '|':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addOperator(entry);
                    done = true;
                } else {
                    escape = false;
                }
            }
            break;
        case '&':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    if (this._addOperator(entry) === 2) // &&
                        done = true;
                } else {
                    escape = false;
                }
            }
            break;
        case '>':
        case '<':
        case '=':
        case ',':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    this._addPrev(COMMAND, entry);
                    this._addOperator(entry);
                } else {
                    escape = false;
                }
            }
            break;
        case '\\':
            if (this._state.value() === NORMAL) {
                if (!escape) {
                    escape = true;
                } else {
                    escape = false;
                }
            }
        }
        ++this._pos;
    }

    if (this._state.value() !== NORMAL) {
        throw "Tokenizer didn't end in normal state";
    }

    this._addPrev(COMMAND, entry);
    if (entry.length > 0) {
        var e = entry[entry.length - 1];
        if (e.type !== OPERATOR && e.data !== ";")
            entry.push({ type: HIDDEN, data: ";" });
    }

    return entry.length === 0 ? undefined : entry;
};

module.exports = {
    Tokenizer: Tokenizer,

    NORMAL: NORMAL,
    QUOTE: QUOTE,
    SINGLEQUOTE: SINGLEQUOTE,
    BRACE: BRACE,
    PAREN: PAREN,

    HIDDEN: HIDDEN,
    OPERATOR: OPERATOR,
    COMMAND: COMMAND,
    JAVASCRIPT: JAVASCRIPT,
    GROUP: GROUP
};
