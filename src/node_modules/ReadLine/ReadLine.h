#ifndef READLINE_HPP
#define READLINE_HPP

#include <nan.h>
#include <string>

class ReadLine : public node::ObjectWrap
{
public:
    static void RegisterModule(v8::Handle<v8::Object> target);

private:
    ReadLine(const std::string& p);
    ~ReadLine();

    static NAN_METHOD(New);
    static NAN_METHOD(resume);
    static NAN_METHOD(cleanup);

    static void RunCallback(uv_async_s* handle);
    static void Run(uv_work_s *req);
    static void Done(uv_work_s *req, int /*status*/);
    static void handleReadLine(char* line);
    static char** attemptShellCompletion(const char* text, int start, int end);

    char** handleComplete(char* text, const char* comp, int start, int end);
    void handleLine(char* line);
    void cleanup();
    void wakeup(char c = 'w');
    void quit();

    void setPrompt(const std::string& prompt);

private:
    uv_loop_s* loop;
    uv_work_s work;
    uv_async_s async;
    int rlPipe[2];
    int stdoutPipe[2];
    int stderrPipe[2];
    std::string prompt;
    std::string last;

private:
    static v8::Persistent<v8::FunctionTemplate> constructor;
    v8::Persistent<v8::Function> lineCallback, completeCallback;
};

#endif
