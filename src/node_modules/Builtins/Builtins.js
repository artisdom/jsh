function jobs() {
    var Job = global.jsh.Job;
    for (var idx = 0; idx < Job.Jobs.length; ++idx) {
        var entry = Job.Jobs[idx];
        var status = "undefined";
        switch (entry.status) {
        case Job.RUNNING:
            status = "running";
            break;
        case Job.STOPPED:
            status = "stopped";
            break;
        case Job.TERMINATED:
            status = "terminated";
            break;
        }
        console.log("[" + (idx + 1) + "]  " + status + "  " + entry.toString());
    }
}

function fg(idx) {
    var Job = global.jsh.Job;
    if (idx === undefined)
        idx = Job.Jobs.length;
    if (typeof idx !== "number") {
        throw "Invalid index " + idx;
    }
    --idx;
    if (idx < 0 || idx >= Job.Jobs.length) {
        throw "Invalid index " + (idx + 1);
    }
    var entry = Job.Jobs[idx];
    if (entry.type !== Job.BACKGROUND && entry.status === Job.RUNNING) {
        throw "Job already running in foreground, shouldn't happen";
    }
    entry.cont(Job.FOREGROUND);

    return { jsh: { wait: true } };
}

function bg(idx) {
    var Job = global.jsh.Job;
    if (idx === undefined)
        idx = 1;
    if (typeof idx !== "number") {
        throw "Invalid index " + idx;
    }
    --idx;
    if (idx < 0 || idx >= Job.Jobs.length) {
        throw "Invalid index " + (idx + 1);
    }
    var entry = Job.Jobs[idx];
    if (entry.type !== Job.FOREGROUND && entry.status === Job.RUNNING) {
        console.log("Job already backgrounded");
    }
    entry.cont(Job.BACKGROUND);
}

function disown(idx) {
    var Job = global.jsh.Job;
    if (idx === undefined)
        idx = 1;
    if (typeof idx !== "number") {
        throw "Invalid index " + idx;
    }
    --idx;
    if (idx < 0 || idx >= Job.Jobs.length) {
        throw "Invalid index " + (idx + 1);
    }
    Job.Jobs.splice(idx, 1);
}

module.exports = {
    jobs: jobs,
    fg: fg,
    bg: bg,
    disown: disown
};

var Completion = require('Completion');
var helper = new Completion.Helper();

(function() {
    var compobj = { cmds: {} };
    for (var i in module.exports) {
        compobj.cmds[i] = null;
    }
    helper.set(compobj);
})();

jsh.completion.register(function(data) {
    var cands = helper.complete(data);
    if (typeof cands === "string")
        cands += " ";
    else if (typeof cands === "object" && cands.length === 1)
        cands[0] += " ";
    return cands;
});
