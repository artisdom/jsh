function Completion()
{
    this._comps = [];
}

Completion.prototype.complete = function(data)
{
    var ret = [], len = this._comps.length;
    for (var idx = len - 1; idx >= 0; --idx) {
        var c = this._comps[idx](data);
        if (c instanceof Array) {
            ret = ret.concat(c);
        } else if (typeof c === "object") {
            if (c.exclusive) {
                ret = c.data;
                return ret;
            } else if (c.stop) {
                if (c.data instanceof Array)
                    ret = ret.concat(c.data);
                return ret;
            }
            if (c.data instanceof Array)
                ret = ret.concat(c.data);
        } else if (c !== undefined) {
            ret.push(c);
        }
    }
    return (!ret.length) ? undefined : ret;
};

Completion.prototype.register = function(cb)
{
    if (typeof cb !== "function") {
        throw "Completion.register needs a function argument";
    }
    this._comps.push(cb);
};

function CompletionHelper()
{
    this._alts = [];
}

CompletionHelper.prototype.add = function(str)
{
    this._alts.push("" + str);
};

CompletionHelper.prototype.complete = function(data)
{
    var cur = data.comp;

    var cand = [], idx;
    for (idx = 0; idx < this._alts.length; ++idx) {
        if (this._alts[idx].substr(0, cur.length) == cur) {
            // candidate
            cand.push(this._alts[idx]);
        }
    }
    if (cand.length === 0)
        return undefined;
    if (cand.length === 1)
        return cand[0];
    // find the lowest common denominator, use the first candidate as a starting point
    cur = cand[0];
    for (idx = 1; idx < cand.length; ++idx) {
        // find the matching point
        var len = cur.length;
        while (len > 0 && cur.substr(0, len) !== cand[idx].substr(0, len))
            --len;
        if (!len) {
            throw "No common starting point?";
        }
        cur = cur.substr(0, len);
    }
    cand.splice(0, 0, cur);
    return cand;
};

module.exports = {
    Completion: Completion,
    Helper: CompletionHelper
};
