var Tokenizer = require('Tokenizer');
var fs = require('fs');

function Completion()
{
    this._comps = [];
}

Completion.prototype.complete = function(data)
{
    var ret = [], len = this._comps.length;
    for (var idx = len - 1; idx >= 0; --idx) {
        var c = this._comps[idx](data);
        if (c instanceof Array) {
            ret = ret.concat(c);
        } else if (typeof c === "object") {
            if (c.exclusive) {
                ret = c.data;
                return ret;
            } else if (c.stop) {
                if (c.data instanceof Array)
                    ret = ret.concat(c.data);
                return ret;
            }
            if (c.data instanceof Array)
                ret = ret.concat(c.data);
        } else if (c !== undefined) {
            ret.push(c);
        }
    }
    return (!ret.length) ? undefined : ret;
};

Completion.prototype.register = function(cb)
{
    if (typeof cb !== "function") {
        throw "Completion.register needs a function argument";
    }
    this._comps.push(cb);
};

Completion.prototype.initDefaults = function()
{
    this.register(fileCompletion);
};

function tokenize(data)
{
    var tokens = [];
    var tok = new Tokenizer.Tokenizer(), token;
    tok.tokenize(data);
    while ((token = tok.next())) {
        tokens.push(token);
    }
    return tokens;
}

function findTokenEntry(tokens, pos)
{
    for (var idx = 0; idx < tokens.length; ++idx) {
        var entry = tokens[idx];
        for (var sub = 0; sub < entry.length; ++sub) {
            var subentry = entry[sub];
            if (subentry.from === undefined
                || subentry.to === undefined)
                continue;
            if (pos >= subentry.from && pos <= subentry.to)
                return { entry: entry, sub: sub };
        }
    }
    return undefined;
}

function lowestCommon(strings)
{
    if (!strings.length)
        return undefined;
    var cur = strings[0];
    for (var idx = 1; idx < strings.length; ++idx) {
        // find the matching point
        var len = cur.length;
        while (len > 0 && cur.substr(0, len) !== strings[idx].substr(0, len))
            --len;
        if (!len) {
            // no common point
            return "";
        }
        cur = cur.substr(0, len);
    }
    return cur;
}

function CompletionHelper()
{
    this._alts = [];
}

CompletionHelper.prototype.add = function(str)
{
    this._alts.push("" + str);
};

CompletionHelper.prototype.complete = function(data)
{
    var tokens;
    try {
        tokens = tokenize(data.text);
    } catch (e) {
        return undefined;
    }
    var entry = findTokenEntry(tokens, data.start);
    if (entry === undefined) {
        return undefined;
    }

    if (entry.sub !== 0 || entry.entry[entry.sub].type !== Tokenizer.COMMAND) {
        // not the first entry of a parsed command
        return undefined;
    }

    var cur = data.comp;
    var cand = [], idx;
    for (idx = 0; idx < this._alts.length; ++idx) {
        if (this._alts[idx].substr(0, cur.length) == cur) {
            // candidate
            cand.push(this._alts[idx]);
        }
    }
    if (cand.length === 0)
        return undefined;
    if (cand.length === 1)
        return cand[0];
    // find the lowest common denominator, use the first candidate as a starting point
    cur = lowestCommon(cand);
    cand.splice(0, 0, cur);
    return cand;
};

function fileCompletion(data)
{
    if (!data.comp.length)
        return undefined;
    if (data.comp[0] === '/') {
        // absolute path, read the dir
        // first, find the previous directory
        var last = data.comp.lastIndexOf('/');
        var path = data.comp.substr(0, last + 1);
        var file = data.comp.substr(last + 1);
        // get all the files
        try {
            var cands = fs.readdirSync(path);
        } catch (e) {
            return undefined;
        }
        if (file.length > 0) {
            var tmp = [];
            for (var idx = 0; idx < cands.length; ++idx) {
                if (cands[idx].substr(0, file.length) === file)
                    tmp.push(cands[idx]);
            }
            cands = tmp;
        }
        if (cands.length > 1) {
            var lowest = lowestCommon(cands);
            cands.splice(0, 0, lowest);
        }
        // append the path
        var lastWasFile = false;
        for (var idx = 0; idx < cands.length; ++idx) {
            cands[idx] = path + cands[idx];
            // append slash if file is a directory
            if (cands[idx][cands[idx].length - 1] !== '/') {
                try {
                    var stats = fs.statSync(cands[idx]);
                    if (stats.isDirectory()) {
                        lastWasFile = false;
                        cands[idx] += '/';
                    } else {
                        lastWasFile = true;
                    }
                } catch (e) {
                    lastWasFile = false;
                }
            }
        }
        if (cands.length === 1 && lastWasFile)
            cands[0] += ' ';
        return cands;
    }
    return undefined;
}

module.exports = {
    Completion: Completion,
    Helper: CompletionHelper
};
