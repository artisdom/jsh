var pc = require('ProcessChain');
var helper = undefined;

function untrackedOrModified(data)
{
    // find the root
    var git = jsh.pathify(data.entry.entry[0].data);
    var root = jsh.jshNative.execSync(git, ["rev-parse", "--show-toplevel"]).stdout;
    if (root === undefined) {
        return undefined;
    }

    // run git status
    var out = jsh.jshNative.execSync(git, ["status", "-u", "--porcelain"]).stdout;

    // find our relative path compared to that
    var cwd = process.cwd();
    var extra = cwd.substr(root.length);
    if (extra.length > 0) {
        var cnt = extra.split('/').length;
        extra = "";
        for (var i = 0; i < cnt; ++i) {
            extra += "../";
        }
    } else {
        extra = "";
    }

    // parse
    if (out === undefined || !out.length)
        return [];
    var lst = out.split('\n');
    var rx = /^ *([^ ]+) +(.*)$/, e;

    var cands = [];
    for (var idx = 0; idx < lst.length; ++idx) {
        if ((e = rx.exec(lst[idx]))) {
            if (e[1][0] === "M" || e[1][0] === "?")
                cands.push(extra + e[2]);
        }
    }
    return cands;
}

function initHelper()
{
    helper = new (require('Completion')).Helper();
    helper.set({ options: { commands: { add: { flags: [ "--all", "--dry-run", "--edit", "--force", "--ignore-errors", "--intent-to-add", "--interactive",
                                                        "--patch", "--refresh", "--update", "--verbose" ], commands: untrackedOrModified },
                                        status: { flags: [ "--short", "--branch", "--porcelain", "--long", "--ignored", "-z" ],
                                                  flagsWithValues: { "--untracked-files": [ null, "no", "normal", "all" ],
                                                                     "--ignore-submodules": [ null, "none", "untracked", "dirty", "all" ],
                                                                     "--column": null,
                                                                     "--no-column": null },
                                                  commands: untrackedOrModified } } } });
}

function complete(data)
{
    if (!helper)
        initHelper();
    var cands = helper.complete(data);
    if (cands === undefined)
        return undefined;
    if (typeof cands === "string" && cands[cands.length - 1] !== "=")
        cands += " ";
    else if (typeof cands === "object" && cands.length === 1)
        cands[0] += " ";
    return cands;
};

module.exports = complete;
